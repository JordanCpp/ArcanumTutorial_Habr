/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef Arcanum_Game_Engine_hpp
#define Arcanum_Game_Engine_hpp

#include <Pollux/Graphics/Canvas.hpp>
#include <Pollux/Graphics/Texture.hpp>
#include <Pollux/Events/EventHandler.hpp>
#include <Arcanum/Managers/SpriteManager.hpp>
#include <Pollux/LiteCpp/LiteCpp.hpp>

namespace Arcanum
{
	class Engine
	{
	public:
		enum
		{
			Mb              = 1024 * 1024,
			DatBufferMax    = Mb * 2,
			ResultBufferMax = Mb * 4,
			GlobalBufferMax = Mb * 16
		};

		Engine();
		~Engine();
		void Run();
	private:
		std::vector<unsigned char>          _GlobalBuffer;
		std::pmr::monotonic_buffer_resource _GlobalResource;
		std::pmr::monotonic_buffer_resource _DatBufferResource;
		std::pmr::monotonic_buffer_resource _ResultBufferResource;
		std::pmr::vector<unsigned char> _DatBuffer;
		std::pmr::vector<unsigned char> _ResultBuffer;
		std::vector<unsigned char> _ArtBuffer;
		std::vector<unsigned char> _RgbBuffer;
		ArtReader                  _ArtReader;
		PathNormalizer             _PathNormalizer;
		ExtFileManager             _ExtFileManager;
		PathManager                _PathManager;
		Pollux::Canvas             _Canvas;
		Pollux::EventHandler       _EventHandler;
		DatList                    _DatList;
		DatReader                  _DatReader;
		DatLoader                  _DatLoader;
		Pollux::FileLoader         _FileLoader;
		DatManager                 _DatManager;
		FileManager                _FileManager;
		ResourceManager            _ResourceManager;
		SpriteManager              _SpriteManager;
		Sprite*                    _Sprite;
	};
}

#endif 
